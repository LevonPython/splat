/****************************************************************************
** Meta object code from reading C++ file 'test_smsplat_list_model.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.6.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#if __has_include(<QtCore/qtmochelpers.h>)
#include <QtCore/qtmochelpers.h>
#else
QT_BEGIN_MOC_NAMESPACE
#endif


#include <memory>

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_smsplat_list_model.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.6.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS = QtMocHelpers::stringData(
    "TestSMSplatListModel",
    "initTestCase",
    "",
    "cleanupTestCase",
    "testInitialState",
    "testAppendItem",
    "testInsertItem",
    "testRemoveItem",
    "testRemoveByName",
    "testGetItem",
    "testGetByName",
    "testIndexOf",
    "testContains",
    "testUpdate",
    "testUpdateByName",
    "testNames",
    "testClear",
    "testSetItems",
    "testCountProperty",
    "testRoleNames",
    "testDataRoles"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS_t {
    uint offsetsAndSizes[42];
    char stringdata0[21];
    char stringdata1[13];
    char stringdata2[1];
    char stringdata3[16];
    char stringdata4[17];
    char stringdata5[15];
    char stringdata6[15];
    char stringdata7[15];
    char stringdata8[17];
    char stringdata9[12];
    char stringdata10[14];
    char stringdata11[12];
    char stringdata12[13];
    char stringdata13[11];
    char stringdata14[17];
    char stringdata15[10];
    char stringdata16[10];
    char stringdata17[13];
    char stringdata18[18];
    char stringdata19[14];
    char stringdata20[14];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS_t qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS = {
    {
        QT_MOC_LITERAL(0, 20),  // "TestSMSplatListModel"
        QT_MOC_LITERAL(21, 12),  // "initTestCase"
        QT_MOC_LITERAL(34, 0),  // ""
        QT_MOC_LITERAL(35, 15),  // "cleanupTestCase"
        QT_MOC_LITERAL(51, 16),  // "testInitialState"
        QT_MOC_LITERAL(68, 14),  // "testAppendItem"
        QT_MOC_LITERAL(83, 14),  // "testInsertItem"
        QT_MOC_LITERAL(98, 14),  // "testRemoveItem"
        QT_MOC_LITERAL(113, 16),  // "testRemoveByName"
        QT_MOC_LITERAL(130, 11),  // "testGetItem"
        QT_MOC_LITERAL(142, 13),  // "testGetByName"
        QT_MOC_LITERAL(156, 11),  // "testIndexOf"
        QT_MOC_LITERAL(168, 12),  // "testContains"
        QT_MOC_LITERAL(181, 10),  // "testUpdate"
        QT_MOC_LITERAL(192, 16),  // "testUpdateByName"
        QT_MOC_LITERAL(209, 9),  // "testNames"
        QT_MOC_LITERAL(219, 9),  // "testClear"
        QT_MOC_LITERAL(229, 12),  // "testSetItems"
        QT_MOC_LITERAL(242, 17),  // "testCountProperty"
        QT_MOC_LITERAL(260, 13),  // "testRoleNames"
        QT_MOC_LITERAL(274, 13)   // "testDataRoles"
    },
    "TestSMSplatListModel",
    "initTestCase",
    "",
    "cleanupTestCase",
    "testInitialState",
    "testAppendItem",
    "testInsertItem",
    "testRemoveItem",
    "testRemoveByName",
    "testGetItem",
    "testGetByName",
    "testIndexOf",
    "testContains",
    "testUpdate",
    "testUpdateByName",
    "testNames",
    "testClear",
    "testSetItems",
    "testCountProperty",
    "testRoleNames",
    "testDataRoles"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSTestSMSplatListModelENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      19,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  128,    2, 0x08,    1 /* Private */,
       3,    0,  129,    2, 0x08,    2 /* Private */,
       4,    0,  130,    2, 0x08,    3 /* Private */,
       5,    0,  131,    2, 0x08,    4 /* Private */,
       6,    0,  132,    2, 0x08,    5 /* Private */,
       7,    0,  133,    2, 0x08,    6 /* Private */,
       8,    0,  134,    2, 0x08,    7 /* Private */,
       9,    0,  135,    2, 0x08,    8 /* Private */,
      10,    0,  136,    2, 0x08,    9 /* Private */,
      11,    0,  137,    2, 0x08,   10 /* Private */,
      12,    0,  138,    2, 0x08,   11 /* Private */,
      13,    0,  139,    2, 0x08,   12 /* Private */,
      14,    0,  140,    2, 0x08,   13 /* Private */,
      15,    0,  141,    2, 0x08,   14 /* Private */,
      16,    0,  142,    2, 0x08,   15 /* Private */,
      17,    0,  143,    2, 0x08,   16 /* Private */,
      18,    0,  144,    2, 0x08,   17 /* Private */,
      19,    0,  145,    2, 0x08,   18 /* Private */,
      20,    0,  146,    2, 0x08,   19 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject TestSMSplatListModel::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSTestSMSplatListModelENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<TestSMSplatListModel, std::true_type>,
        // method 'initTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testInitialState'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testAppendItem'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testInsertItem'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testRemoveItem'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testRemoveByName'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGetItem'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGetByName'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testIndexOf'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testContains'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testUpdate'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testUpdateByName'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testNames'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testClear'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSetItems'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testCountProperty'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testRoleNames'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testDataRoles'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void TestSMSplatListModel::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestSMSplatListModel *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->testInitialState(); break;
        case 3: _t->testAppendItem(); break;
        case 4: _t->testInsertItem(); break;
        case 5: _t->testRemoveItem(); break;
        case 6: _t->testRemoveByName(); break;
        case 7: _t->testGetItem(); break;
        case 8: _t->testGetByName(); break;
        case 9: _t->testIndexOf(); break;
        case 10: _t->testContains(); break;
        case 11: _t->testUpdate(); break;
        case 12: _t->testUpdateByName(); break;
        case 13: _t->testNames(); break;
        case 14: _t->testClear(); break;
        case 15: _t->testSetItems(); break;
        case 16: _t->testCountProperty(); break;
        case 17: _t->testRoleNames(); break;
        case 18: _t->testDataRoles(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestSMSplatListModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestSMSplatListModel::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSTestSMSplatListModelENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestSMSplatListModel::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 19)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 19;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 19)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 19;
    }
    return _id;
}
QT_WARNING_POP
